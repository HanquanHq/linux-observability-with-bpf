<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="278.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="261" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="261" > </text>
<g id="frames">
<g >
<title>runtime.main (4,087 samples, 87.61%)</title><rect x="10.0" y="197" width="1033.8" height="15.0" fill="rgb(220,50,45)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >runtime.main</text>
</g>
<g >
<title>runtime.doSigPreempt (78 samples, 1.67%)</title><rect x="594.3" y="133" width="19.7" height="15.0" fill="rgb(238,204,9)" rx="2" ry="2" />
<text  x="597.31" y="143.5" ></text>
</g>
<g >
<title>runtime.setg.abi0 (47 samples, 1.01%)</title><rect x="533.1" y="149" width="11.9" height="15.0" fill="rgb(216,74,14)" rx="2" ry="2" />
<text  x="536.10" y="159.5" ></text>
</g>
<g >
<title>runtime.isAsyncSafePoint (1 samples, 0.02%)</title><rect x="989.9" y="117" width="0.3" height="15.0" fill="rgb(214,10,32)" rx="2" ry="2" />
<text  x="992.92" y="127.5" ></text>
</g>
<g >
<title>runtime.retake (157 samples, 3.37%)</title><rect x="1131.8" y="149" width="39.7" height="15.0" fill="rgb(209,91,28)" rx="2" ry="2" />
<text  x="1134.82" y="159.5" >run..</text>
</g>
<g >
<title>runtime.sigreturn.abi0 (1,912 samples, 40.99%)</title><rect x="532.1" y="181" width="483.6" height="15.0" fill="rgb(207,124,41)" rx="2" ry="2" />
<text  x="535.08" y="191.5" >runtime.sigreturn.abi0</text>
</g>
<g >
<title>runtime.asyncPreempt2 (134 samples, 2.87%)</title><rect x="35.3" y="149" width="33.9" height="15.0" fill="rgb(225,53,48)" rx="2" ry="2" />
<text  x="38.29" y="159.5" >ru..</text>
</g>
<g >
<title>runtime.nanotime1.abi0 (10 samples, 0.21%)</title><rect x="468.6" y="133" width="2.5" height="15.0" fill="rgb(219,149,34)" rx="2" ry="2" />
<text  x="471.59" y="143.5" ></text>
</g>
<g >
<title>runtime.unlock2 (1 samples, 0.02%)</title><rect x="1171.5" y="149" width="0.3" height="15.0" fill="rgb(214,55,2)" rx="2" ry="2" />
<text  x="1174.53" y="159.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (1 samples, 0.02%)</title><rect x="217.9" y="37" width="0.3" height="15.0" fill="rgb(216,161,6)" rx="2" ry="2" />
<text  x="220.92" y="47.5" ></text>
</g>
<g >
<title>runtime.getpid.abi0 (7 samples, 0.15%)</title><rect x="1161.9" y="117" width="1.8" height="15.0" fill="rgb(230,63,39)" rx="2" ry="2" />
<text  x="1164.92" y="127.5" ></text>
</g>
<g >
<title>runtime.isAsyncSafePoint (828 samples, 17.75%)</title><rect x="721.8" y="101" width="209.4" height="15.0" fill="rgb(214,147,17)" rx="2" ry="2" />
<text  x="724.79" y="111.5" >runtime.isAsyncSafePoint</text>
</g>
<g >
<title>runtime.gopreempt_m (1 samples, 0.02%)</title><rect x="531.8" y="149" width="0.3" height="15.0" fill="rgb(217,188,20)" rx="2" ry="2" />
<text  x="534.83" y="159.5" ></text>
</g>
<g >
<title>runtime.sighandler (45 samples, 0.96%)</title><rect x="480.7" y="101" width="11.4" height="15.0" fill="rgb(224,116,27)" rx="2" ry="2" />
<text  x="483.74" y="111.5" ></text>
</g>
<g >
<title>runtime.gogo.abi0 (71 samples, 1.52%)</title><rect x="319.1" y="85" width="18.0" height="15.0" fill="rgb(253,38,10)" rx="2" ry="2" />
<text  x="322.10" y="95.5" ></text>
</g>
<g >
<title>gogo (1 samples, 0.02%)</title><rect x="531.8" y="101" width="0.3" height="15.0" fill="rgb(248,82,35)" rx="2" ry="2" />
<text  x="534.83" y="111.5" ></text>
</g>
<g >
<title>runtime.findfunc (45 samples, 0.96%)</title><rect x="480.7" y="85" width="11.4" height="15.0" fill="rgb(215,202,17)" rx="2" ry="2" />
<text  x="483.74" y="95.5" ></text>
</g>
<g >
<title>time.Time.Sub (68 samples, 1.46%)</title><rect x="492.1" y="149" width="17.2" height="15.0" fill="rgb(235,132,10)" rx="2" ry="2" />
<text  x="495.12" y="159.5" ></text>
</g>
<g >
<title>runtime.findRunnable (379 samples, 8.12%)</title><rect x="218.2" y="85" width="95.8" height="15.0" fill="rgb(207,112,13)" rx="2" ry="2" />
<text  x="221.18" y="95.5" >runtime.fin..</text>
</g>
<g >
<title>runtime.usleep.abi0 (15 samples, 0.32%)</title><rect x="1171.8" y="149" width="3.8" height="15.0" fill="rgb(211,138,44)" rx="2" ry="2" />
<text  x="1174.79" y="159.5" ></text>
</g>
<g >
<title>runtime.execute (169 samples, 3.62%)</title><rect x="175.4" y="85" width="42.8" height="15.0" fill="rgb(231,146,9)" rx="2" ry="2" />
<text  x="178.43" y="95.5" >runt..</text>
</g>
<g >
<title>runtime.lock2 (5 samples, 0.11%)</title><rect x="1156.6" y="133" width="1.3" height="15.0" fill="rgb(254,205,17)" rx="2" ry="2" />
<text  x="1159.61" y="143.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (2 samples, 0.04%)</title><rect x="526.0" y="165" width="0.5" height="15.0" fill="rgb(210,216,4)" rx="2" ry="2" />
<text  x="529.01" y="175.5" ></text>
</g>
<g >
<title>runtime.nanotime1.abi0 (1 samples, 0.02%)</title><rect x="217.9" y="53" width="0.3" height="15.0" fill="rgb(205,187,42)" rx="2" ry="2" />
<text  x="220.92" y="63.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (1 samples, 0.02%)</title><rect x="531.8" y="133" width="0.3" height="15.0" fill="rgb(238,217,38)" rx="2" ry="2" />
<text  x="534.83" y="143.5" ></text>
</g>
<g >
<title>runtime.sigreturn.abi0 (83 samples, 1.78%)</title><rect x="471.1" y="149" width="21.0" height="15.0" fill="rgb(228,104,10)" rx="2" ry="2" />
<text  x="474.12" y="159.5" ></text>
</g>
<g >
<title>internal/bytealg.IndexByteString.abi0 (78 samples, 1.67%)</title><rect x="835.4" y="69" width="19.7" height="15.0" fill="rgb(223,57,25)" rx="2" ry="2" />
<text  x="838.37" y="79.5" ></text>
</g>
<g >
<title>runtime.casgstatus (38 samples, 0.81%)</title><rect x="113.7" y="117" width="9.6" height="15.0" fill="rgb(236,198,53)" rx="2" ry="2" />
<text  x="116.71" y="127.5" ></text>
</g>
<g >
<title>indexbytebody (171 samples, 3.67%)</title><rect x="792.1" y="69" width="43.3" height="15.0" fill="rgb(234,186,11)" rx="2" ry="2" />
<text  x="795.11" y="79.5" >inde..</text>
</g>
<g >
<title>runtime.signalM (3 samples, 0.06%)</title><rect x="1163.7" y="117" width="0.8" height="15.0" fill="rgb(207,126,13)" rx="2" ry="2" />
<text  x="1166.69" y="127.5" ></text>
</g>
<g >
<title>main.main (2,040 samples, 43.73%)</title><rect x="10.0" y="181" width="516.0" height="15.0" fill="rgb(254,43,16)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >main.main</text>
</g>
<g >
<title>runtime.funcname (263 samples, 5.64%)</title><rect x="790.6" y="85" width="66.5" height="15.0" fill="rgb(237,227,5)" rx="2" ry="2" />
<text  x="793.60" y="95.5" >runtime..</text>
</g>
<g >
<title>runtime.adjustSignalStack (7 samples, 0.15%)</title><rect x="592.5" y="133" width="1.8" height="15.0" fill="rgb(253,119,20)" rx="2" ry="2" />
<text  x="595.54" y="143.5" ></text>
</g>
<g >
<title>all (4,665 samples, 100%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(248,118,48)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>runtime.findfunc (77 samples, 1.65%)</title><rect x="702.3" y="101" width="19.5" height="15.0" fill="rgb(248,153,13)" rx="2" ry="2" />
<text  x="705.32" y="111.5" ></text>
</g>
<g >
<title>runtime.(*moduledata).textAddr (5 samples, 0.11%)</title><rect x="857.1" y="69" width="1.3" height="15.0" fill="rgb(210,169,49)" rx="2" ry="2" />
<text  x="860.12" y="79.5" ></text>
</g>
<g >
<title>runtime.signalM (1 samples, 0.02%)</title><rect x="1170.3" y="133" width="0.2" height="15.0" fill="rgb(231,91,53)" rx="2" ry="2" />
<text  x="1173.27" y="143.5" ></text>
</g>
<g >
<title>runtime.lock2 (10 samples, 0.21%)</title><rect x="1112.6" y="149" width="2.5" height="15.0" fill="rgb(218,18,13)" rx="2" ry="2" />
<text  x="1115.60" y="159.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (75 samples, 1.61%)</title><rect x="446.8" y="133" width="19.0" height="15.0" fill="rgb(219,27,26)" rx="2" ry="2" />
<text  x="449.84" y="143.5" ></text>
</g>
<g >
<title>runtime.newstack (22 samples, 0.47%)</title><rect x="526.5" y="165" width="5.6" height="15.0" fill="rgb(249,175,27)" rx="2" ry="2" />
<text  x="529.52" y="175.5" ></text>
</g>
<g >
<title>runtime.isAbortPC (2 samples, 0.04%)</title><rect x="614.0" y="133" width="0.5" height="15.0" fill="rgb(229,38,35)" rx="2" ry="2" />
<text  x="617.04" y="143.5" ></text>
</g>
<g >
<title>time.Time.Sub (64 samples, 1.37%)</title><rect x="509.3" y="165" width="16.2" height="15.0" fill="rgb(227,73,13)" rx="2" ry="2" />
<text  x="512.32" y="175.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (905 samples, 19.40%)</title><rect x="123.3" y="117" width="228.9" height="15.0" fill="rgb(236,115,42)" rx="2" ry="2" />
<text  x="126.32" y="127.5" >runtime.goschedImpl</text>
</g>
<g >
<title>time.now (183 samples, 3.92%)</title><rect x="419.5" y="149" width="46.3" height="15.0" fill="rgb(239,16,12)" rx="2" ry="2" />
<text  x="422.52" y="159.5" >time..</text>
</g>
<g >
<title>runtime.casgstatus (66 samples, 1.41%)</title><rect x="201.5" y="69" width="16.7" height="15.0" fill="rgb(207,123,35)" rx="2" ry="2" />
<text  x="204.48" y="79.5" ></text>
</g>
<g >
<title>runtime.retake (1 samples, 0.02%)</title><rect x="1049.9" y="165" width="0.2" height="15.0" fill="rgb(244,169,12)" rx="2" ry="2" />
<text  x="1052.87" y="175.5" ></text>
</g>
<g >
<title>runtime.sysmon (496 samples, 10.63%)</title><rect x="1050.1" y="165" width="125.5" height="15.0" fill="rgb(232,14,32)" rx="2" ry="2" />
<text  x="1053.12" y="175.5" >runtime.sysmon</text>
</g>
<g >
<title>runtime.findnull (12 samples, 0.26%)</title><rect x="787.6" y="85" width="3.0" height="15.0" fill="rgb(235,114,47)" rx="2" ry="2" />
<text  x="790.56" y="95.5" ></text>
</g>
<g >
<title>runtime.findRunnable (3 samples, 0.06%)</title><rect x="135.5" y="101" width="0.7" height="15.0" fill="rgb(209,36,41)" rx="2" ry="2" />
<text  x="138.46" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (9 samples, 0.19%)</title><rect x="1047.6" y="165" width="2.3" height="15.0" fill="rgb(206,155,50)" rx="2" ry="2" />
<text  x="1050.59" y="175.5" ></text>
</g>
<g >
<title>runtime.preemptone (49 samples, 1.05%)</title><rect x="1157.9" y="133" width="12.4" height="15.0" fill="rgb(214,227,19)" rx="2" ry="2" />
<text  x="1160.88" y="143.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (6 samples, 0.13%)</title><rect x="469.6" y="117" width="1.5" height="15.0" fill="rgb(213,165,51)" rx="2" ry="2" />
<text  x="472.61" y="127.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.06%)</title><rect x="134.7" y="85" width="0.8" height="15.0" fill="rgb(232,216,43)" rx="2" ry="2" />
<text  x="137.70" y="95.5" ></text>
</g>
<g >
<title>runtime.schedule (838 samples, 17.96%)</title><rect x="139.8" y="101" width="211.9" height="15.0" fill="rgb(221,35,39)" rx="2" ry="2" />
<text  x="142.76" y="111.5" >runtime.schedule</text>
</g>
<g >
<title>runtime.mstart1 (578 samples, 12.39%)</title><rect x="1043.8" y="181" width="146.2" height="15.0" fill="rgb(208,225,0)" rx="2" ry="2" />
<text  x="1046.80" y="191.5" >runtime.mstart1</text>
</g>
<g >
<title>runtime.adjustSignalStack (38 samples, 0.81%)</title><rect x="471.1" y="101" width="9.6" height="15.0" fill="rgb(248,169,51)" rx="2" ry="2" />
<text  x="474.12" y="111.5" ></text>
</g>
<g >
<title>runtime.lock2 (40 samples, 0.86%)</title><rect x="352.2" y="117" width="10.2" height="15.0" fill="rgb(212,43,52)" rx="2" ry="2" />
<text  x="355.24" y="127.5" ></text>
</g>
<g >
<title>runtime.gopreempt_m (1,115 samples, 23.90%)</title><rect x="93.2" y="133" width="282.1" height="15.0" fill="rgb(254,16,52)" rx="2" ry="2" />
<text  x="96.22" y="143.5" >runtime.gopreempt_m</text>
</g>
<g >
<title>__vdso_clock_gettime (2 samples, 0.04%)</title><rect x="419.0" y="149" width="0.5" height="15.0" fill="rgb(251,201,31)" rx="2" ry="2" />
<text  x="422.02" y="159.5" ></text>
</g>
<g >
<title>runtime.goschedImpl (37 samples, 0.79%)</title><rect x="375.3" y="133" width="9.3" height="15.0" fill="rgb(225,176,41)" rx="2" ry="2" />
<text  x="378.26" y="143.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt2.abi0 (10 samples, 0.21%)</title><rect x="384.6" y="165" width="2.5" height="15.0" fill="rgb(231,113,32)" rx="2" ry="2" />
<text  x="387.62" y="175.5" ></text>
</g>
<g >
<title>runtime.sigtrampgo (1,789 samples, 38.35%)</title><rect x="559.1" y="149" width="452.6" height="15.0" fill="rgb(246,114,35)" rx="2" ry="2" />
<text  x="562.15" y="159.5" >runtime.sigtrampgo</text>
</g>
<g >
<title>runtime.mstart.abi0 (578 samples, 12.39%)</title><rect x="1043.8" y="213" width="146.2" height="15.0" fill="rgb(247,113,48)" rx="2" ry="2" />
<text  x="1046.80" y="223.5" >runtime.mstart.abi0</text>
</g>
<g >
<title>time.Now (208 samples, 4.46%)</title><rect x="413.2" y="165" width="52.6" height="15.0" fill="rgb(232,227,5)" rx="2" ry="2" />
<text  x="416.20" y="175.5" >time...</text>
</g>
<g >
<title>runtime.sighandler (2 samples, 0.04%)</title><rect x="558.6" y="149" width="0.5" height="15.0" fill="rgb(228,33,21)" rx="2" ry="2" />
<text  x="561.64" y="159.5" ></text>
</g>
<g >
<title>gogo (33 samples, 0.71%)</title><rect x="166.1" y="85" width="8.3" height="15.0" fill="rgb(232,87,18)" rx="2" ry="2" />
<text  x="169.07" y="95.5" ></text>
</g>
<g >
<title>runtime.findfunc (93 samples, 1.99%)</title><rect x="764.0" y="85" width="23.6" height="15.0" fill="rgb(205,80,25)" rx="2" ry="2" />
<text  x="767.04" y="95.5" >r..</text>
</g>
<g >
<title>time.Since (3 samples, 0.06%)</title><rect x="1043.0" y="181" width="0.8" height="15.0" fill="rgb(232,55,31)" rx="2" ry="2" />
<text  x="1046.04" y="191.5" ></text>
</g>
<g >
<title>runtime.mstart0 (578 samples, 12.39%)</title><rect x="1043.8" y="197" width="146.2" height="15.0" fill="rgb(211,190,40)" rx="2" ry="2" />
<text  x="1046.80" y="207.5" >runtime.mstart0</text>
</g>
<g >
<title>runtime.nanotime (13 samples, 0.28%)</title><rect x="467.8" y="149" width="3.3" height="15.0" fill="rgb(235,123,2)" rx="2" ry="2" />
<text  x="470.83" y="159.5" ></text>
</g>
<g >
<title>runtime.asyncPreempt.abi0 (1,459 samples, 31.28%)</title><rect x="15.6" y="165" width="369.0" height="15.0" fill="rgb(208,47,38)" rx="2" ry="2" />
<text  x="18.56" y="175.5" >runtime.asyncPreempt.abi0</text>
</g>
<g >
<title>runtime.nanotime1.abi0 (66 samples, 1.41%)</title><rect x="1115.1" y="149" width="16.7" height="15.0" fill="rgb(239,34,42)" rx="2" ry="2" />
<text  x="1118.13" y="159.5" ></text>
</g>
<g >
<title>time.now (2 samples, 0.04%)</title><rect x="525.5" y="165" width="0.5" height="15.0" fill="rgb(219,68,4)" rx="2" ry="2" />
<text  x="528.51" y="175.5" ></text>
</g>
<g >
<title>runtime.sigtrampgo (83 samples, 1.78%)</title><rect x="471.1" y="117" width="21.0" height="15.0" fill="rgb(231,109,42)" rx="2" ry="2" />
<text  x="474.12" y="127.5" ></text>
</g>
<g >
<title>runtime.findfunc (176 samples, 3.77%)</title><rect x="945.4" y="101" width="44.5" height="15.0" fill="rgb(227,47,42)" rx="2" ry="2" />
<text  x="948.40" y="111.5" >runt..</text>
</g>
<g >
<title>runtime.sigfwdgo (95 samples, 2.04%)</title><rect x="614.5" y="133" width="24.1" height="15.0" fill="rgb(221,195,29)" rx="2" ry="2" />
<text  x="617.54" y="143.5" >r..</text>
</g>
<g >
<title>time.Since (172 samples, 3.69%)</title><rect x="465.8" y="165" width="43.5" height="15.0" fill="rgb(237,159,53)" rx="2" ry="2" />
<text  x="468.81" y="175.5" >time..</text>
</g>
<g >
<title>runtime.lock2 (3 samples, 0.06%)</title><rect x="308.2" y="69" width="0.8" height="15.0" fill="rgb(224,192,45)" rx="2" ry="2" />
<text  x="311.23" y="79.5" ></text>
</g>
<g >
<title>runtime.nanotime (103 samples, 2.21%)</title><rect x="387.1" y="165" width="26.1" height="15.0" fill="rgb(249,198,35)" rx="2" ry="2" />
<text  x="390.14" y="175.5" >r..</text>
</g>
<g >
<title>runtime.globrunqget (20 samples, 0.43%)</title><rect x="314.0" y="85" width="5.1" height="15.0" fill="rgb(253,191,29)" rx="2" ry="2" />
<text  x="317.04" y="95.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (33 samples, 0.71%)</title><rect x="1104.3" y="149" width="8.3" height="15.0" fill="rgb(252,164,39)" rx="2" ry="2" />
<text  x="1107.25" y="159.5" ></text>
</g>
<g >
<title>runtime.nanotime1.abi0 (8 samples, 0.17%)</title><rect x="465.8" y="149" width="2.0" height="15.0" fill="rgb(241,122,21)" rx="2" ry="2" />
<text  x="468.81" y="159.5" ></text>
</g>
<g >
<title>runtime.unlock2 (2 samples, 0.04%)</title><rect x="351.7" y="101" width="0.5" height="15.0" fill="rgb(211,47,44)" rx="2" ry="2" />
<text  x="354.73" y="111.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (44 samples, 0.94%)</title><rect x="1093.1" y="149" width="11.2" height="15.0" fill="rgb(245,94,6)" rx="2" ry="2" />
<text  x="1096.12" y="159.5" ></text>
</g>
<g >
<title>runtime.sigfwdgo (54 samples, 1.16%)</title><rect x="545.0" y="149" width="13.6" height="15.0" fill="rgb(231,171,46)" rx="2" ry="2" />
<text  x="547.98" y="159.5" ></text>
</g>
<g >
<title>runtime.sigtrampgo (16 samples, 0.34%)</title><rect x="1011.7" y="165" width="4.0" height="15.0" fill="rgb(205,99,8)" rx="2" ry="2" />
<text  x="1014.67" y="175.5" ></text>
</g>
<g >
<title>runtime.morestack.abi0 (24 samples, 0.51%)</title><rect x="526.0" y="181" width="6.1" height="15.0" fill="rgb(206,5,19)" rx="2" ry="2" />
<text  x="529.01" y="191.5" ></text>
</g>
<g >
<title>runtime.doSigPreempt (1,042 samples, 22.34%)</title><rect x="667.9" y="117" width="263.6" height="15.0" fill="rgb(230,6,20)" rx="2" ry="2" />
<text  x="670.92" y="127.5" >runtime.doSigPreempt</text>
</g>
<g >
<title>__vdso_clock_gettime (3 samples, 0.06%)</title><rect x="467.8" y="133" width="0.8" height="15.0" fill="rgb(241,211,25)" rx="2" ry="2" />
<text  x="470.83" y="143.5" ></text>
</g>
<g >
<title>runtime.mcall (1,243 samples, 26.65%)</title><rect x="70.2" y="149" width="314.4" height="15.0" fill="rgb(244,186,43)" rx="2" ry="2" />
<text  x="73.20" y="159.5" >runtime.mcall</text>
</g>
<g >
<title>runtime.sigsend (84 samples, 1.80%)</title><rect x="990.4" y="133" width="21.3" height="15.0" fill="rgb(252,22,6)" rx="2" ry="2" />
<text  x="993.42" y="143.5" >r..</text>
</g>
<g >
<title>runtime.pcvalue (288 samples, 6.17%)</title><rect x="858.4" y="69" width="72.8" height="15.0" fill="rgb(234,16,14)" rx="2" ry="2" />
<text  x="861.39" y="79.5" >runtime...</text>
</g>
<g >
<title>runtime.pcdatavalue2 (1 samples, 0.02%)</title><rect x="931.2" y="101" width="0.3" height="15.0" fill="rgb(247,186,52)" rx="2" ry="2" />
<text  x="934.23" y="111.5" ></text>
</g>
<g >
<title>__vdso_clock_gettime (12 samples, 0.26%)</title><rect x="1128.8" y="133" width="3.0" height="15.0" fill="rgb(245,79,33)" rx="2" ry="2" />
<text  x="1131.79" y="143.5" ></text>
</g>
<g >
<title>runtime.runqget (58 samples, 1.24%)</title><rect x="337.1" y="85" width="14.6" height="15.0" fill="rgb(215,154,22)" rx="2" ry="2" />
<text  x="340.06" y="95.5" ></text>
</g>
<g >
<title>runtime.schedule (51 samples, 1.09%)</title><rect x="362.4" y="117" width="12.9" height="15.0" fill="rgb(254,30,53)" rx="2" ry="2" />
<text  x="365.36" y="127.5" ></text>
</g>
<g >
<title>runtime.pcdatavalue2 (293 samples, 6.28%)</title><rect x="857.1" y="85" width="74.1" height="15.0" fill="rgb(240,176,27)" rx="2" ry="2" />
<text  x="860.12" y="95.5" >runtime...</text>
</g>
<g >
<title>runtime.adjustSignalStack (4 samples, 0.09%)</title><rect x="532.1" y="149" width="1.0" height="15.0" fill="rgb(254,20,3)" rx="2" ry="2" />
<text  x="535.08" y="159.5" ></text>
</g>
<g >
<title>runtime.findnull (8 samples, 0.17%)</title><rect x="855.1" y="69" width="2.0" height="15.0" fill="rgb(240,54,23)" rx="2" ry="2" />
<text  x="858.10" y="79.5" ></text>
</g>
<g >
<title>runtime.unlock2 (4 samples, 0.09%)</title><rect x="1170.5" y="133" width="1.0" height="15.0" fill="rgb(236,36,1)" rx="2" ry="2" />
<text  x="1173.52" y="143.5" ></text>
</g>
<g >
<title>runtime.sigsend (1 samples, 0.02%)</title><rect x="990.2" y="117" width="0.2" height="15.0" fill="rgb(216,167,37)" rx="2" ry="2" />
<text  x="993.17" y="127.5" ></text>
</g>
<g >
<title>runtime.casgstatus (15 samples, 0.32%)</title><rect x="131.7" y="101" width="3.8" height="15.0" fill="rgb(218,82,4)" rx="2" ry="2" />
<text  x="134.67" y="111.5" ></text>
</g>
<g >
<title>runtime.step (61 samples, 1.31%)</title><rect x="915.8" y="53" width="15.4" height="15.0" fill="rgb(248,20,51)" rx="2" ry="2" />
<text  x="918.80" y="63.5" ></text>
</g>
<g >
<title>runtime.sigtramp.abi0 (1,896 samples, 40.64%)</title><rect x="532.1" y="165" width="479.6" height="15.0" fill="rgb(241,8,12)" rx="2" ry="2" />
<text  x="535.08" y="175.5" >runtime.sigtramp.abi0</text>
</g>
<g >
<title>runtime.lock2 (14 samples, 0.30%)</title><rect x="136.2" y="101" width="3.6" height="15.0" fill="rgb(252,35,33)" rx="2" ry="2" />
<text  x="139.22" y="111.5" ></text>
</g>
<g >
<title>runtime.sigtramp.abi0 (83 samples, 1.78%)</title><rect x="471.1" y="133" width="21.0" height="15.0" fill="rgb(253,38,39)" rx="2" ry="2" />
<text  x="474.12" y="143.5" ></text>
</g>
<g >
<title>runtime.unlock2 (20 samples, 0.43%)</title><rect x="309.0" y="69" width="5.0" height="15.0" fill="rgb(233,80,27)" rx="2" ry="2" />
<text  x="311.98" y="79.5" ></text>
</g>
<g >
<title>runtime.gcTrigger.test (15 samples, 0.32%)</title><rect x="1043.8" y="165" width="3.8" height="15.0" fill="rgb(242,187,42)" rx="2" ry="2" />
<text  x="1046.80" y="175.5" ></text>
</g>
<g >
<title>runtime.checkTimers (4 samples, 0.09%)</title><rect x="174.4" y="85" width="1.0" height="15.0" fill="rgb(241,217,21)" rx="2" ry="2" />
<text  x="177.42" y="95.5" ></text>
</g>
<g >
<title>time.Now (108 samples, 2.32%)</title><rect x="1015.7" y="181" width="27.3" height="15.0" fill="rgb(252,228,17)" rx="2" ry="2" />
<text  x="1018.72" y="191.5" >t..</text>
</g>
<g >
<title>runtime.isAbortPC (231 samples, 4.95%)</title><rect x="931.5" y="117" width="58.4" height="15.0" fill="rgb(241,57,18)" rx="2" ry="2" />
<text  x="934.49" y="127.5" >runtim..</text>
</g>
<g >
<title>runtime.schedule (1 samples, 0.02%)</title><rect x="531.8" y="117" width="0.3" height="15.0" fill="rgb(226,90,25)" rx="2" ry="2" />
<text  x="534.83" y="127.5" ></text>
</g>
<g >
<title>runtime.usleep.abi0 (57 samples, 1.22%)</title><rect x="1175.6" y="165" width="14.4" height="15.0" fill="rgb(250,106,34)" rx="2" ry="2" />
<text  x="1178.58" y="175.5" ></text>
</g>
<g >
<title>runtime.tgkill.abi0 (23 samples, 0.49%)</title><rect x="1164.5" y="117" width="5.8" height="15.0" fill="rgb(254,83,17)" rx="2" ry="2" />
<text  x="1167.45" y="127.5" ></text>
</g>
<g >
<title>runtime.goexit.abi0 (4,087 samples, 87.61%)</title><rect x="10.0" y="213" width="1033.8" height="15.0" fill="rgb(221,53,7)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >runtime.goexit.abi0</text>
</g>
<g >
<title>runtime.sighandler (1,391 samples, 29.82%)</title><rect x="638.6" y="133" width="351.8" height="15.0" fill="rgb(248,188,16)" rx="2" ry="2" />
<text  x="641.57" y="143.5" >runtime.sighandler</text>
</g>
<g >
<title>runtime.gopreempt_m (4 samples, 0.09%)</title><rect x="69.2" y="149" width="1.0" height="15.0" fill="rgb(241,100,14)" rx="2" ry="2" />
<text  x="72.19" y="159.5" ></text>
</g>
</g>
</svg>
